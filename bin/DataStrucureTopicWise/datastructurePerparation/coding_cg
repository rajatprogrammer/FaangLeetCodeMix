

class Solution {
    public int numTeams(int[] rating) {
        int count =0;
        int length = rating.length;
        for(int i=0;i<length;i++){
            for(int j=i+1;j<length;j++){
                if((rating[i] < rating[j]) ||(rating[i]>rating[j])){
                    for(int k=j+1;k<length;k++){
                  if((rating[i] < rating[j]) &&(rating[j]< rating[k])){
                        count =count+1;
                    } else{
                         if((rating[i]>rating[j]) && (rating[j]>rating[k])){
                            count =count+1;
                    }   
                    }

                }    
                }
                
            }
        }
        return count;
    }
}


https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix/


import java.util.ArrayList;
class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        List<Integer> low = new ArrayList<Integer>();
        List<Integer> high = new ArrayList<Integer>();
        int i=0;
        for(i=0;i<colsum.length;i++){
            if(colsum[i]==0){
                low.add(0);
                high.add(0); 
            }
            else if(colsum[i]==1){
                 if(upper>0){
                    low.add(1);
                    high.add(0);
                     --upper;
                 }else if(lower>0){
                     low.add(0);
                    high.add(1); 
                     --lower;
                 }
                
            }else if(colsum[i]==2){
                low.add(1);
                high.add(1);
                --lower;
                --upper;
            }
        }
        if(lower==0 && upper==0 && i==colsum.length-1){
            List<List<Integer>> ob1 = new ArrayList<List<Integer>>();
            ob1.add(low);
            ob1.add(high);
            return ob1;
        }else{
            return (new ArrayList<List<Integer>>());
        }
    }
}
